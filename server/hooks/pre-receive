#!/usr/bin/env bash

BASE_DIR=""
REPO=""
BRANCH=""

CACHE_DIR=""
CUR_USER=""

# Get files begin pushed via 'git push'
read oldref newref refname;

# get user who is pushing the changes via 'git push'
#
# This user should comes from commiter_name<commiter_email>
# If, you think this is a mistake and author_name<author_email> should comes
# in place of commiter, then change this pretty format to "%an<%ae>"
CUR_USER=$(git log $newref -1 --pretty="%cn<%ce>")

# get repo name
if [ $(git rev-parse --is-bare-repository) = true ]
then
    REPO=$(basename "$PWD")
else
    REPO=$(basename $(readlink -nf "$PWD"/..))
fi

REPO=${REPO%.git}

# get branch name
BRANCH=$(git rev-parse --symbolic --abbrev-ref $refname)

for f in $(git diff --name-only $oldref..$newref); do
    local query_out="$(git-file-locker --lock=query --repo=$REPO \
        --branch=$BRANCH --user=$CUR_USER --file=$f --no-upload 2>&1)"
    local query_retval=$?

    if [[ "$query_retval" -eq 0 ]]; then
        # retval == 0, file is either unlocked, or locked to same user, as supplied,
        #               or expired/invalid lock
        continue;
    elif [[ "$query_retval" -eq  1 ]]; then
        # retval == 1, file is locked to someone else
        local lck_user=$(printf '%s' "$query_out" | sed 's/^STATUS:LOCKED to user //')
        echo "ERROR: File('$f') included in current operation is already locked to '$lck_user'."
        echo "Can't continue, exiting."
        exit 1
    else
        # retval >= 2, something unexpected, just pass msg to user and exit with same err_code
        echo "ERROR: $query_out"
        exit $query_retval
    fi
done

# get base dir
if [ -d "/var/tmp" ] && [ -w "/var/tmp" ]; then
    BASE_DIR="/var/tmp"
elif [ -d "/tmp" ] && [ -w "/tmp" ]; then
    BASE_DIR="/tmp"
else
    BASE_DIR=$(dirname $(mktemp))
fi

# get cache dir
CACHE_DIR="$BASE_DIR/git-file-locker/cache/locks/$REPO/$BRANCH"

mkdir -p $CACHE_DIR

# acquire lock
#
# it doesn't matter if someone else has created lock first, as it is a lineant
# lock and is not meant for push operation strictness, as that is by default 
# managed by git itself, this lock serve as a declaration that some push 
# operation is going on, so that while someone is acquiring lock on some file, 
# then they can have warning or error triggered to remined to update files 
# before working on them directly.
touch $CACHE_DIR/push.lck

